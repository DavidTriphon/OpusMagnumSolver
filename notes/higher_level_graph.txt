nodes are sets of molecules

resources available per neighbor:
    parts from partlist

    movements are not exclusive resources
    area overlap on parts is exclusive
    this makes part usage exclusive

dimensions to count in simplified state tracker:
    counts of atoms by types
    count of all atoms
    counts of bonds by type
    count of all bonds
    count of molecules
    count of looped bonds (mathematically determined by m - a + b)
    elemental material (quintessence is 4, (vigor and mors) = max(v, m))
    metal material (scaled according to purification: 1, 2, 4, 8, 16, 32)


actions:
    (all actions implied to take at least 1 cycle (shareable)

    add reagent:
        effects:
            + A atoms in molecule
            + B bonds in molecule
            + N*X for every N atoms of type X in molecule
            + 1 molecule
        requirements:
            1 reagent input part
            A area for input part, distinct
            no other molecule overlapping reagent
            1 arm (1 grab)

    bond:
        effects:
            + 1 bond
            OR(
                - 1 molecule
                + 1 looping bond
            )
        requirements:
            1 bonder
            2 area for bonder, distinct
            2 atoms on bonder
            1-2 movements
                1+ arms per movement

    debond:
        effects:
            - 1 bond
            OR(
                + 1 molecule
                - 1 looping bond
            )
        requirements:
            1 debonder
            2 area for debonder, distinct
            2 atoms on debonder
            1 movement
                1 arm

    calcify:
        effects:
            - 1 X (for whatever element is used)
            + 1 salt
        requirements:
            1 calcification
            1 area for calcifier, distinct
            1 atom on calcifier
            1 movement
                1 arm

    remove product:
        effects:
            - A atoms in molecule
            - B bonds in molecule
            - N*X for every N atoms of type X in molecule
            - 1 molecule
        requirements:
            1 product output part
            A area for output part, distinct
            product on output part
            1 movement (1 cycle)
                1 or more arms gripping product
            1 drop (1 cycle)
                1 drop per arm (all grabbed arms must drop)

reverse solve examples:
    test 391:
        start:
            { products = [-1] }
        solve for products: apply 1 x Output[0]
            { water = -1, salt = -3, bonds = -3 }
        solve for bonds: apply 3 x Bonder
            { water = -1, salt = -3 }
        solve for salt: apply 3 x Calcifications
            { water = -4 }
        solve for water: apply 4 x Input[0]
            { }
        SOLVED

2024-07-29

I spent a lot of time in bed last night thinking about hierarchical search.
Turns out that's already been invented, but the first application I found
requires exploring all edges of the upper hierarchy. that doesn't work for me
since exploration space is infinite.

There's several layers I want to specify, but I think I have the step-by-step
process in my head. writing it down should help me remember it and highlight
errors.

I'm using an array of booleans as the guide. In order to create a solution, all
of these boolean conditions must be flipped to true. These conditions are
effectively the list of subtask goals to perform before a product can be
outputted.

for test 391, those tasks are:
    product = [S-S-S-W]
    - atom 0 must be obtained
    - atom 1 must be obtained
    - atom 2 must be obtained
    - atom 3 must be obtained
        (this could either be zero cost by assignment or 1 cost by grabbing)
    - atom 0 bonded to atom 1
    - atom 1 bonded to atom 2
    - atom 2 bonded to atom 3
        (for each of these, check that when multiple bonds exist, they are at
        the right angles)
    - atom 0 calcified
    - atom 1 calcified
    - atom 2 calcified
    - product dropped on output

these tasks can be performed in many possible combination orders.
There are restrictions/constraints on the subtask order, namely:
    atoms must be obtained before they are bonded or calcified
    the product must be dropped on the output last

The highest conceptual state is {produced = [0]} -> {produced = [1]}
the second-highest conceptual state is these subtasks, tracked as booleans:
    e.g. {atom0: True, atom1: True, atom2: False ... produced=[0]}
the third highest is the secondary subtasks to create the transform conditions:
    e.g. { bond_0_to_1: {move atom0 to bonder, move atom1 to bonder }, ... }

...
    these tasks keep breaking down until:
    [... move arm to pos0, grab, move molecule from pos0 to pos1, drop, ...]
    these tasks have a discrete heuristic for cost in terms of cycles
    the quest is to find the combinations of these discrete subtasks that has
    the least cost
        this is a search function for determining least possible cost

    Determining the least cost from pos0 to pos1 for a molecule
    requires tracking how molecules move within arm space.
    For 1 arm, the heuristic is linear, but for 2 or more arms, the size and
    shape of the molecule determines whether it is possible to change hands.
    That's for later. 391 has only 1 arm.

    many of the possible combinations of discrete subtasks will have repeats
    with other combinations or even themselves. the results of such operations
    should be cached. external factors need to be accounted for when caching
    results. only heuristics can be cached. not resulting paths, unless
    maybe they are optimal???

INSIGHT:
    KEEP BREAKING IT DOWN FURTHER
    GO TOP DOWN THE HIERARCHY
    - a heuristic is only used within a specific subtask
    - the heuristic within a subtask is the cost of the subtask from above
    - break down the steps from the start of the progression to the end in order
    - use constraint propagation on eliminating other subtasks further down the
    line
    - start with a single node that wants to go from one state to another
    - see what options are available in order to accomplish that task for the
    current node
    - evaluate the options by iterating the connected nodes
    - keep the order akin to dijkstra. use heuristic when available to convert
    to a*. The more layers/subtasks that have heuristics, the better.

2024-07-30:

    I'm having confusions over the design of shifting from the path search to
    the constraint greedy search for any.
    I'm also having concerns about the number of nodes explored by the
    hierarchical search between choosing the order of actions and implementing
    those actions.

    ~~I think the fastest way to find a cheap path, knowing that there are
    subactions that must all be performed, is to first construct a complete
    layer of actions using the heuristic for movements as cost, and then
    iterating over the sub-nodes for the tasks, while keeping the entire
    frontier at an appropriate cost, so other more costly unfinished heuristic
    paths could be evaluated alongside lower cost heuristic paths as they
    accumulate real costs from implementing the lower nodes.~~

    I think the idea behind implementing recursive definitions of tasks is more
    a part of the constraints that determine the list of tasks. What I'm solving
    for now is the same as if I gave it initial constraints regarding part
    positions and part counts.

    wait never mind about heuristic layer and then implementation layer. That
    means redoing work on multiple branches when solving for implementation of
    an edge that has already been selected by multiple children paths.

    Also, I'm realizing that my recursive order of subtasks isn't great for
    situations such as:
    - move atom0 to bonder to prep for bonding (uncovers atom1)
    - move atom1 to calcifier to turn it to salt
    - move atom1 to bonder to create bond

    previous models would not have allowed this order except by coincidence.

Constraints:
    - an atom used in an output must be produced by an input or producer part
    - a bond used in an output must be produced by a bonder or a reagent
    - an atom used in a consumer part must be produced by an input or producer
    ergo:
        - an atom has a path between its origin and destination that passes over
          a list of required locations a certain number of times in every
          configuration and order

just wrote a lot in the journal again. playing around with the old cycles tabled
understanding of parallel operations, but instead applying it to ordered single
operations. I got the heuristic up to 26, but it requires knowledge of distance
between available positions, and understanding the cheapest way to rotate a
bonded atom to get it on the right spot, which requires translating one
coordinate space to another.

Improving the heuristic:
    currently the heuristic only counts the cost of material and transforms, but
    not grabs and drops. 4 atoms to grab from input means a necessary 4 drops
    and min of 4 moves to reposition.

I'm noticing a pattern that switches my attention when I consider different
process and comparisons and algorithms. I frequently shift based on reducing
repeated work or based on trying to be more greedy and reducing nodes
considered.

For example, earlier when I debated whether the heuristic graph layer should
be path searched before the implementation layer was path searched, I was
considering the greedy approach, and interested in reducing searching the
implementation layer on a path I wouldn't need.
When I wavered and went back to stay on the implementation layer, and work from
the start, that was out of a fear of creating duplicate work.

I need to figure out what I'm looking for, what's acceptable, and what the
strengths and weaknesses are of pre-existing algorithms and why those work the
way that they do, so I can keep the important properties and discard the rest.

For A* to guarantee the result is optimal solution, the heuristic must be
admissible. The most straight forward way to guarantee admissibility is to
guarantee consistency. That means the heuristic cost for a node is never less
than the heuristic cost of its parent minus the edge cost. Alternatively, the
heuristic cost for a node can never be more than the minimum cost of all paths
that lead from that node to the goal.

My current heuristic is not consistent, but for 391, it is optimal.
I am going to experiment with the heuristic to see if I can make it more
consistent.

